% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TuningInstanceAsyncMulticrit.R
\name{TuningInstanceAsyncMultiCrit}
\alias{TuningInstanceAsyncMultiCrit}
\title{Multi-Criteria Tuning with Rush}
\description{
The \link{TuningInstanceAsyncMultiCrit} specifies a tuning problem for \link{Tuner}s.
Hyperparameter configurations are evaluated asynchronously with the \code{rush} package.
The function \code{\link[=ti]{ti()}} creates a \link{TuningInstanceAsyncMultiCrit} and the function \code{\link[=tune]{tune()}} creates an instance internally.
}
\details{
The instance contains an \link{ObjectiveTuning} object that encodes the black box objective function a \link{Tuner} has to optimize.
The instance allows the basic operations of querying the objective at design points (\verb{$eval_async()}).
This operation is usually done by the \link{Tuner}.
Hyperparameter configurations are asynchronously sent to workers and evaluated by calling \code{\link[mlr3:resample]{mlr3::resample()}}.
The evaluated hyperparameter configurations are stored in the \link{ArchiveAsyncTuning} (\verb{$archive}).
Before a batch is evaluated, the \link[bbotk:Terminator]{bbotk::Terminator} is queried for the remaining budget.
If the available budget is exhausted, an exception is raised, and no further evaluations can be performed from this point on.
The tuner is also supposed to store its final result, consisting of a  selected hyperparameter configuration and associated estimated performance values, by calling the method \code{instance$.assign_result}.
}
\section{Resources}{

There are several sections about hyperparameter optimization in the \href{https://mlr3book.mlr-org.com}{mlr3book}.
\itemize{
\item Learn about \href{https://mlr3book.mlr-org.com/chapters/chapter5/advanced_tuning_methods_and_black_box_optimization.html#sec-multi-metrics-tuning}{multi-objective optimization}.
}

The \href{https://mlr-org.com/gallery-all-optimization.html}{gallery} features a collection of case studies and demos about optimization.
}

\section{Analysis}{

For analyzing the tuning results, it is recommended to pass the \link{ArchiveTuning} to \code{as.data.table()}.
The returned data table is joined with the benchmark result which adds the \link[mlr3:ResampleResult]{mlr3::ResampleResult} for each hyperparameter evaluation.

The archive provides various getters (e.g. \verb{$learners()}) to ease the access.
All getters extract by position (\code{i}) or unique hash (\code{uhash}).
For a complete list of all getters see the methods section.

The benchmark result (\verb{$benchmark_result}) allows to score the hyperparameter configurations again on a different measure.
Alternatively, measures can be supplied to \code{as.data.table()}.

The \CRANpkg{mlr3viz} package provides visualizations for tuning results.
}

\section{Super classes}{
\code{\link[bbotk:OptimInstance]{bbotk::OptimInstance}} -> \code{\link[bbotk:OptimInstanceAsync]{bbotk::OptimInstanceAsync}} -> \code{\link[bbotk:OptimInstanceAsyncMultiCrit]{bbotk::OptimInstanceAsyncMultiCrit}} -> \code{TuningInstanceAsyncMultiCrit}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{result_learner_param_vals}}{(\code{list()})\cr
List of param values for the optimal learner call.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TuningInstanceAsyncMultiCrit-new}{\code{TuningInstanceAsyncMultiCrit$new()}}
\item \href{#method-TuningInstanceAsyncMultiCrit-start_workers}{\code{TuningInstanceAsyncMultiCrit$start_workers()}}
\item \href{#method-TuningInstanceAsyncMultiCrit-clone}{\code{TuningInstanceAsyncMultiCrit$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="bbotk" data-topic="OptimInstance" data-id="format"><a href='../../bbotk/html/OptimInstance.html#method-OptimInstance-format'><code>bbotk::OptimInstance$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="bbotk" data-topic="OptimInstanceAsync" data-id="clear"><a href='../../bbotk/html/OptimInstanceAsync.html#method-OptimInstanceAsync-clear'><code>bbotk::OptimInstanceAsync$clear()</code></a></span></li>
<li><span class="pkg-link" data-pkg="bbotk" data-topic="OptimInstanceAsync" data-id="print"><a href='../../bbotk/html/OptimInstanceAsync.html#method-OptimInstanceAsync-print'><code>bbotk::OptimInstanceAsync$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="bbotk" data-topic="OptimInstanceAsyncMultiCrit" data-id="assign_result"><a href='../../bbotk/html/OptimInstanceAsyncMultiCrit.html#method-OptimInstanceAsyncMultiCrit-assign_result'><code>bbotk::OptimInstanceAsyncMultiCrit$assign_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TuningInstanceAsyncMultiCrit-new"></a>}}
\if{latex}{\out{\hypertarget{method-TuningInstanceAsyncMultiCrit-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TuningInstanceAsyncMultiCrit$new(
  task,
  learner,
  resampling,
  measures,
  terminator,
  search_space = NULL,
  store_benchmark_result = TRUE,
  store_models = FALSE,
  check_values = FALSE,
  allow_hotstart = FALSE,
  hotstart_threshold = NULL,
  keep_hotstart_stack = FALSE,
  evaluate_default = FALSE,
  callbacks = list(),
  rush = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{task}}{(\link[mlr3:Task]{mlr3::Task})\cr
Task to operate on.}

\item{\code{learner}}{(\link[mlr3:Learner]{mlr3::Learner})\cr
Learner to tune.}

\item{\code{resampling}}{(\link[mlr3:Resampling]{mlr3::Resampling})\cr
Resampling that is used to evaluate the performance of the hyperparameter configurations.
Uninstantiated resamplings are instantiated during construction so that all configurations are evaluated on the same data splits.
Already instantiated resamplings are kept unchanged.
Specialized \link{Tuner} change the resampling e.g. to evaluate a hyperparameter configuration on different data splits.
This field, however, always returns the resampling passed in construction.}

\item{\code{measures}}{(list of \link[mlr3:Measure]{mlr3::Measure})\cr
Measures to optimize.}

\item{\code{terminator}}{(\link{Terminator})\cr
Stop criterion of the tuning process.}

\item{\code{search_space}}{(\link[paradox:ParamSet]{paradox::ParamSet})\cr
Hyperparameter search space. If \code{NULL} (default), the search space is
constructed from the \link{TuneToken} of the learner's parameter set
(learner$param_set).}

\item{\code{store_benchmark_result}}{(\code{logical(1)})\cr
If \code{TRUE} (default), store resample result of evaluated hyperparameter
configurations in archive as \link[mlr3:BenchmarkResult]{mlr3::BenchmarkResult}.}

\item{\code{store_models}}{(\code{logical(1)})\cr
If \code{TRUE}, fitted models are stored in the benchmark result
(\code{archive$benchmark_result}). If \code{store_benchmark_result = FALSE}, models
are only stored temporarily and not accessible after the tuning. This
combination is needed for measures that require a model.}

\item{\code{check_values}}{(\code{logical(1)})\cr
If \code{TRUE}, hyperparameter values are checked before evaluation and
performance scores after. If \code{FALSE} (default), values are unchecked but
computational overhead is reduced.}

\item{\code{allow_hotstart}}{(\code{logical(1)})\cr
Allow to hotstart learners with previously fitted models. See also
\link[mlr3:HotstartStack]{mlr3::HotstartStack}. The learner must support hotstarting. Sets
\code{store_models = TRUE}.}

\item{\code{hotstart_threshold}}{(\code{numeric(1)})\cr
Threshold for storing learners in the stack.
If the value of the hotstart parameter is below this threshold, the learner is not added to the stack.}

\item{\code{keep_hotstart_stack}}{(\code{logical(1)})\cr
If \code{TRUE}, \link[mlr3:HotstartStack]{mlr3::HotstartStack} is kept in \verb{$objective$hotstart_stack}
after tuning.}

\item{\code{evaluate_default}}{(\code{logical(1)})\cr
If \code{TRUE}, learner is evaluated with hyperparameters set to their default
values at the start of the optimization.}

\item{\code{callbacks}}{(list of \link{CallbackTuning})\cr
List of callbacks.}

\item{\code{rush}}{(\code{Rush})\cr
If a rush instance is supplied, the tuning runs without batches.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TuningInstanceAsyncMultiCrit-start_workers"></a>}}
\if{latex}{\out{\hypertarget{method-TuningInstanceAsyncMultiCrit-start_workers}{}}}
\subsection{Method \code{start_workers()}}{
Start workers with the \code{future} package.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TuningInstanceAsyncMultiCrit$start_workers(
  n_workers = NULL,
  host = "local",
  heartbeat_period = NULL,
  heartbeat_expire = NULL,
  lgr_thresholds = NULL,
  await_workers = TRUE,
  detect_lost_tasks = FALSE,
  freeze_archive = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n_workers}}{(\code{integer(1)})\cr
Number of workers to be started.
If \code{NULL} the maximum number of free workers is used.}

\item{\code{host}}{(\code{character(1)})\cr
Worker is started on a local or remote host.}

\item{\code{heartbeat_period}}{(\code{integer(1)})\cr
Period of the heartbeat in seconds.}

\item{\code{heartbeat_expire}}{(\code{integer(1)})\cr
Time to live of the heartbeat in seconds.}

\item{\code{lgr_thresholds}}{(named \code{character()} or \code{numeric()})\cr
Thresholds for the \code{lgr} package e.g. c(rush = "debug", bbotk = "info", mlr3 = "info").
If \code{NULL}, no log messages from the workers are saved.}

\item{\code{await_workers}}{(\code{logical(1)})\cr
Whether to wait until all workers are available.}

\item{\code{detect_lost_tasks}}{(\code{logical(1)})\cr
Whether to detect lost tasks.
Defaults to \code{FALSE}.}

\item{\code{freeze_archive}}{(\code{logical(1)})\cr
If \code{TRUE}, the archive is copied from redis to a local data.table after tuning.
This is helpful when the tuning is run on a remote machine and the archive is serialized.
Only used if \code{rush} is supplied.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TuningInstanceAsyncMultiCrit-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TuningInstanceAsyncMultiCrit-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TuningInstanceAsyncMultiCrit$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
